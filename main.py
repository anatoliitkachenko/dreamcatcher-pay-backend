import os
import hmac
import hashlib
import base64
import re
import json
from datetime import datetime, timedelta, date
from dateutil.relativedelta import relativedelta
from fastapi import FastAPI, Request, HTTPException, APIRouter, Body
from fastapi.responses import HTMLResponse
from pydantic import BaseModel
from datetime import datetime, timedelta, date
from typing import List, Optional, Dict, Any, Union
from motor.motor_asyncio import AsyncIOMotorClient
from fastapi.middleware.cors import CORSMiddleware
from dotenv import load_dotenv
import logging
import aiohttp
from pytz import timezone 

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

MONGO_URI = os.getenv("MONGO_URI")
WAYFORPAY_MERCHANT_ACCOUNT = os.getenv("WAYFORPAY_MERCHANT_ACCOUNT")
WAYFORPAY_SECRET_KEY = os.getenv("WAYFORPAY_SECRET_KEY")
WAYFORPAY_DOMAIN = os.getenv("WAYFORPAY_DOMAIN")

mongo_client = AsyncIOMotorClient(MONGO_URI)
db = mongo_client["dream_database"]

app = FastAPI()
payment_api_router = APIRouter(prefix="/api/pay")

# ‚ùó –ü–†–û–í–ï–†–ò–¢–¨/–ù–ê–°–¢–†–û–ò–¢–¨: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∏ URL —Ç–æ—á–Ω—ã
# –ó–∞–ø—Ä–æ—Å –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å 'https://www.dreamcatcher.guru'
FRONTEND_DOMAIN_WWW = "https://www.dreamcatcher.guru" # <--- üü¢ –î–û–ë–ê–í–õ–ï–ù–û 'www.'
FRONTEND_DOMAIN_NO_WWW = "https://dreamcatcher.guru" # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∏–Ω–æ–≥–¥–∞ –±–µ–∑ www
BACKEND_DOMAIN = "https://payapi.dreamcatcher.guru" # –ï—Å–ª–∏ –≤–∞—à API –Ω–∞ –¥—Ä—É–≥–æ–º –ø–æ–¥–¥–æ–º–µ–Ω–µ

# URL –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ API —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±–æ—Ç–∞
BOT_NOTIFICATION_URL = os.getenv('BOT_NOTIFICATION_URL', 'http://157.90.119.107:8001/internal-api/notify') # <--- –£–ö–ê–ñ–ò–¢–ï –†–ï–ê–õ–¨–ù–´–ô URL –∏ –ø–æ—Ä—Ç!

# –í–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –≤–∫–ª—é—á–∞—è –ª–æ–∫–∞–ª—å–Ω—ã–µ
origins = [
    FRONTEND_DOMAIN_WWW,    # <--- üü¢ –ò–°–ü–û–õ–¨–ó–£–ï–ú –° 'www.'
    FRONTEND_DOMAIN_NO_WWW, # <--- –î–æ–±–∞–≤—å—Ç–µ –∏ –±–µ–∑ 'www.', –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
    BACKEND_DOMAIN,         # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ API –∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –¥–æ–º–µ–Ω–∞—Ö/–ø–æ–¥–¥–æ–º–µ–Ω–∞—Ö –∏ –Ω—É–∂–Ω—ã –≤–∑–∞–∏–º–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    # "http://localhost",
    # "http://127.0.0.1",
    # "http://localhost:xxxx", # –ó–∞–º–µ–Ω–∏—Ç–µ xxxx –Ω–∞ –ø–æ—Ä—Ç, –µ—Å–ª–∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç–µ –ª–æ–∫–∞–ª—å–Ω–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["GET", "POST", "OPTIONS", "PUT", "DELETE", "PATCH"],
    allow_headers=["*"], 
    expose_headers=["*"],
    max_age=600
)

class CheckoutSession(BaseModel):
    user_id: str
    plan_type: str
    username: Optional[str] = None
    first_name: Optional[str] = None

class WidgetParamsRequest(BaseModel):
    user_id: str
    plan_type: str 
    lang: Optional[str] = 'UA' # –Ø–∑—ã–∫ –≤–∏–¥–∂–µ—Ç–∞ (UA, RU, EN)
    client_first_name: Optional[str] = None
    client_last_name: Optional[str] = None
    client_email: Optional[str] = None
    client_phone: Optional[str] = None

class WayForPayServiceWebhook(BaseModel):
    merchantAccount: str
    orderReference: str
    merchantSignature: str # –ü–æ–¥–ø–∏—Å—å –æ—Ç WayForPay, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
    amount: float
    currency: str
    authCode: Optional[str] = None
    email: Optional[str] = None
    phone: Optional[str] = None
    createdDate: Optional[int] = None # –í –ø—Ä–∏–º–µ—Ä–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ CHECK_STATUS —ç—Ç–æ int, –≤ –ø—Ä–∏–º–µ—Ä–µ serviceUrl webhook - —Ç–æ–∂–µ
    processingDate: Optional[int] = None
    cardPan: Optional[str] = None
    cardType: Optional[str] = None
    issuerBankCountry: Optional[str] = None # –í –ø—Ä–∏–º–µ—Ä–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ CHECK_STATUS —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ "UA", –≤ serviceUrl webhook "980"
    issuerBankName: Optional[str] = None
    recToken: Optional[str] = None
    transactionStatus: str
    reason: Optional[str] = None 
    reasonCode: Optional[int] = None
    paymentSystem: Optional[str] = None
    repayUrl: Optional[str] = None
    class Config:
        extra = 'allow' # –∏–ª–∏ 'ignore'

def make_wayforpay_signature(secret_key: str, params_list: List[str]) -> str:
    sign_str = ';'.join(str(x) for x in params_list)
    # –î–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ API WayForPay –ø–æ–¥–ø–∏—Å—å HMAC-MD5 –≤ hex-—Ñ–æ—Ä–º–∞—Ç–µ
    return hmac.new(secret_key.encode(), sign_str.encode(), hashlib.md5).hexdigest()

# main.py - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
@payment_api_router.post("/get-widget-params")
async def get_widget_payment_params(request_data: WidgetParamsRequest):
    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞ (/api/pay/get-widget-params): {request_data}")

    user_id_str = request_data.user_id
    plan_type = request_data.plan_type
    
    product_name_str = ""
    amount = 0

    if plan_type == "subscription":
        amount = 1 # –ë—ã–ª–æ 300, —Ç–µ–ø–µ—Ä—å 1 –¥–ª—è —Ç–µ—Å—Ç–∞
        product_name_str = "AI Dream Analysis (Subscription)"
        order_ref_prefix = "widget_sub"
    elif plan_type == "single":
        amount = 40
        product_name_str = "AI Dream Analysis (Single)"
        order_ref_prefix = "widget_single"
    else:
        logger.error(f"Invalid plan_type '{plan_type}' received for widget params.")
        raise HTTPException(status_code=400, detail="Invalid plan_type. Allowed: 'subscription', 'single'.")

    order_ref = f"{order_ref_prefix}_{user_id_str}_{int(datetime.utcnow().timestamp())}"
    order_date = int(datetime.utcnow().timestamp())
    
    base_backend_url = os.getenv('BACKEND_URL_BASE', 'https://payapi.dreamcatcher.guru')

    # 1. –£–ø—Ä–æ—â–∞–µ–º signature_params_list –¥–æ –±–∞–∑–æ–≤—ã—Ö –ø–æ–ª–µ–π (—Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API Purchase)
    signature_params_list = [
        WAYFORPAY_MERCHANT_ACCOUNT,
        WAYFORPAY_DOMAIN,
        order_ref,
        str(order_date),
        str(amount),
        "UAH",
        product_name_str,   # productName[0]
        "1",                # productCount[0]
        str(amount)         # productPrice[0]
    ]
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω–∞
    string_to_sign = ';'.join(str(x) for x in signature_params_list)
    logger.info(f"–°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ (String to sign): {string_to_sign}")
    
    merchant_signature = make_wayforpay_signature(WAYFORPAY_SECRET_KEY, signature_params_list)
    logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å: {merchant_signature}")

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –≤–∏–¥–∂–µ—Ç
    widget_params_to_send = {
        "merchantAccount": WAYFORPAY_MERCHANT_ACCOUNT,
        "merchantAuthType": "SimpleSignature",
        "merchantDomainName": WAYFORPAY_DOMAIN,
        "merchantSignature": merchant_signature, # –ò—Å–ø–æ–ª—å–∑—É–µ–º "–ø—Ä–æ—Å—Ç—É—é" –ø–æ–¥–ø–∏—Å—å
        "language": request_data.lang.upper() if request_data.lang and request_data.lang.upper() in ["UA", "RU", "EN"] else "UA",
        "serviceUrl": f"{base_backend_url}/api/pay/wayforpay-webhook",
        "orderReference": order_ref,
        "orderDate": str(order_date),
        "amount": str(amount),
        "currency": "UAH",
        "productName": [product_name_str],
        "productPrice": [str(amount)],
        "productCount": ["1"],
        "clientFirstName": request_data.client_first_name or "N/A",
        "clientLastName": request_data.client_last_name or "N/A",
        "clientEmail": request_data.client_email or f"user_{user_id_str}@example.com",
        "clientPhone": request_data.client_phone or "380000000000"
    }

    if plan_type == "subscription":
        today_date_obj = date.today()
        next_month_date = today_date_obj + relativedelta(months=1)
        # 2. –ò–°–ü–†–ê–í–õ–Ø–ï–ú –§–û–†–ú–ê–¢ –î–ê–¢–´ –¥–ª—è regularStartDate –Ω–∞ –î–î.–ú–ú.–ì–ì–ì–ì
        regular_start_date_str = next_month_date.strftime("%d.%m.%Y") 
        
        regular_params_for_widget = {
            "regularMode": "monthly",
            "regularAmount": str(amount), 
            "regularCount": "12",          
            "regularStartDate": regular_start_date_str, # <--- –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –≤ –ü–†–ê–í–ò–õ–¨–ù–û–ú —Ñ–æ—Ä–º–∞—Ç–µ
            "regularInterval": "1"        
        }
        widget_params_to_send.update(regular_params_for_widget)

    logger.info(f"–§–∏–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞ WayForPay (—Å –ø–æ–¥–ø–∏—Å—å—é): {widget_params_to_send}")
    
    try:
        user_id_int = int(user_id_str)
    except ValueError:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π user_id '{user_id_str}' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ payment_attempts.")
        raise HTTPException(status_code=400, detail="Invalid user_id format for database.")

    await db["payment_attempts"].insert_one({
        "orderReference": order_ref,
        "user_id": user_id_int,
        "plan_type": plan_type,
        "amount": amount,
        "status": "widget_params_generated",
        "created_utc": datetime.utcnow(),
        "widget_request_data": request_data.model_dump(),
        "sent_to_wfp_params": widget_params_to_send
    })
    
    return widget_params_to_send

@payment_api_router.get("/check-access") 
async def check_access_endpoint(user_id: str): # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å —Ñ—É–Ω–∫—Ü–∏–µ–π check_access –∏–∑ –±–æ—Ç–∞
    try:
        user_id_int = int(user_id)
    except ValueError:
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π user_id –≤ /api/pay/check-access: {user_id}")
        return {"active": False}
    
    tz_kyiv = timezone('Europe/Kyiv') 
    today_kyiv_str = datetime.now(tz_kyiv).strftime("%Y-%m-%d")

    sub = await db["subscriptions"].find_one({"user_id": user_id_int}) 
    
    if sub and sub.get("is_active") == 1 and sub.get("subscription_end") >= today_kyiv_str:
        logger.info(f"–î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è user_id {user_id_int} —á–µ—Ä–µ–∑ /api/pay/check-access. –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {sub.get('subscription_end')}")
        return {"active": True}
    
    logger.info(f"–î–æ—Å—Ç—É–ø –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è user_id {user_id_int} —á–µ—Ä–µ–∑ /api/pay/check-access. –î–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: {sub}")
    return {"active": False}

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∏ –æ—Ç–≤–µ—Ç–∞ –≤–∞—à–µ–≥–æ serviceUrl –¥–ª—è WayForPay ---
def make_service_response_signature(secret_key: str, order_reference: str, status: str, time_unix: int) -> str:
    sign_str = f"{order_reference};{status};{str(time_unix)}"
    logger.info(f"Service URL response string to sign: '{sign_str}'")
    signature = hmac.new(secret_key.encode(), sign_str.encode(), hashlib.md5).hexdigest()
    logger.info(f"Service URL response generated signature: '{signature}'")
    return signature

def verify_service_webhook_signature(secret_key: str, data: WayForPayServiceWebhook) -> bool:
    auth_code_for_sig = data.authCode if data.authCode is not None else ""
    card_pan_for_sig = data.cardPan if data.cardPan is not None else ""
    # reasonCode –º–æ–∂–µ—Ç –±—ã—Ç—å int –∏–ª–∏ str, –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
    reason_code_for_sig = str(data.reasonCode) if data.reasonCode is not None else ""


    fields_for_signature_check = [
        data.merchantAccount,
        data.orderReference,
        str(int(data.amount)) if data.amount and data.amount == int(data.amount) else str(data.amount),
        data.currency,
        auth_code_for_sig,
        card_pan_for_sig,
        data.transactionStatus,
        reason_code_for_sig 
    ]
    
    sign_str_to_check = ';'.join(fields_for_signature_check)
    expected_signature = hmac.new(secret_key.encode(), sign_str_to_check.encode(), hashlib.md5).hexdigest()
    
    logger.info(f"Verifying service webhook signature. String: '{sign_str_to_check}', Expected: '{expected_signature}', Received: '{data.merchantSignature}'")
    if expected_signature == data.merchantSignature:
        logger.info(f"Service webhook signature VERIFIED for OrderRef: {data.orderReference}")
        return True
    else:
        logger.error(f"!!! Service webhook signature MISMATCH for OrderRef: {data.orderReference} !!!")
        return False

# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ –≤–µ–±-—Ö—É–∫–æ–≤ –æ—Ç WayForPay ---
@payment_api_router.post("/wayforpay-webhook", include_in_schema=False)
async def wayforpay_webhook_handler(request: Request): # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç Request
    content_type = request.headers.get("content-type")
    logger.info(f"–û–¢–†–ò–ú–ê–ù–û –í–ï–ë-–•–£–ö. Content-Type: {content_type}")

    raw_body = await request.body() # –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ –±–∞–π—Ç—ã —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    logger.info(f"RAW Webhook Body (bytes): {raw_body[:1000]}") # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 1000 –±–∞–π—Ç —Å—ã—Ä–æ–≥–æ —Ç–µ–ª–∞

    data_to_process = {} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞

    try:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å—ã—Ä–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å—Ç—Ä–æ–∫—É.
            # –≠—Ç–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —à–∞–≥, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º JSON.
        body_str_for_parsing = ""
        try:
            body_str_for_parsing = raw_body.decode('utf-8')
        except UnicodeDecodeError as e_unicode:
            logger.error(f"UnicodeDecodeError when decoding raw body: {e_unicode}. Body (partial bytes): {raw_body[:100]}")
            raise ValueError(f"Cannot decode raw body from UTF-8: {e_unicode}") # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å

        logger.info(f"Attempting to parse the entire DECODED body string as JSON. Decoded body for parsing: {body_str_for_parsing[:1000]}")

        if not body_str_for_parsing.strip(): # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É—Å—Ç–∞—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–±–µ–ª–æ–≤
            logger.warning("Decoded body string is empty or whitespace. Cannot parse as JSON.")
            raise ValueError("Empty or whitespace decoded body string received, cannot parse as JSON.")
            
        # –û—Å–Ω–æ–≤–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –≤—Å—è —Å—Ç—Ä–æ–∫–∞ body_str_for_parsing - —ç—Ç–æ JSON
        data_to_process = json.loads(body_str_for_parsing)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
        if not isinstance(data_to_process, dict):
            logger.error(f"Parsing decoded body as JSON did not result in a dictionary. Parsed type: {type(data_to_process)}. Data: {str(data_to_process)[:1000]}")
            raise ValueError(f"Expected a JSON object (dict) after parsing, but got {type(data_to_process)}")
            
        # –ï—Å–ª–∏ data_to_process –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å {} (–≤–∞–ª–∏–¥–Ω—ã–π JSON), Pydantic —ç—Ç–æ –æ—Ç–ª–æ–≤–∏—Ç –Ω–∏–∂–µ, –µ—Å–ª–∏ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ
        # –ü–æ—ç—Ç–æ–º—É –æ—Ç–¥–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ if not data_to_process –Ω–µ —Ç–∞–∫ –∫—Ä–∏—Ç–∏—á–Ω–∞ –∑–¥–µ—Å—å, –µ—Å–ª–∏ —ç—Ç–æ dict.

        logger.info(f"–î–∞–Ω–Ω—ñ –≤–µ–±-—Ö—É–∫–∞ –¥–ª—è Pydantic –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó (Parsed Dict from decoded body): {str(data_to_process)[:1000]}")
            
        # –¢–µ–ø–µ—Ä—å –ø–æ–ø—ã—Ç–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Pydantic —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º —Å–ª–æ–≤–∞—Ä–µ–º data_to_process
        webhook_data = WayForPayServiceWebhook(**data_to_process)
        logger.info(f"–í–µ–±-—Ö—É–∫ –£–°–ü–Ü–®–ù–û –ø—Ä–æ–≤–∞–ª—ñ–¥–æ–≤–∞–Ω–∏–π Pydantic: {webhook_data.model_dump_json(indent=2)[:1000]}")

    except Exception as e_parse_or_pydantic: # –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ò–õ–ò Pydantic –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        logger.error(f"!!! –ü–û–ú–ò–õ–ö–ê –û–ë–†–û–ë–ö–ò/–í–ê–õ–Ü–î–ê–¶–Ü–á –í–ï–ë-–•–£–ö–ê !!!: {e_parse_or_pydantic}")
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑–≤–∞–ª–∏ –æ—à–∏–±–∫—É (–µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã)
        if data_to_process: # –ï—Å–ª–∏ data_to_process –±—ã–ª–æ –∫–∞–∫-—Ç–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –¥–æ –æ—à–∏–±–∫–∏
            logger.error(f"–î–∞–Ω—ñ, —â–æ –≤–∏–∫–ª–∏–∫–∞–ª–∏ –ø–æ–º–∏–ª–∫—É (data_to_process): {str(data_to_process)[:1000]}")
        else: # –ï—Å–ª–∏ data_to_process –ø—É—Å—Ç–æ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ json.loads(body_str_for_log))
            logger.error(f"–î–∞–Ω—ñ, —â–æ –≤–∏–∫–ª–∏–∫–∞–ª–∏ –ø–æ–º–∏–ª–∫—É (body_str_for_log): {body_str_for_log[:1000]}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è WayForPay –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å orderReference –∏–∑ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ data_to_process –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        temp_order_ref = "UNKNOWN_ORDER_REF_ERROR"
        if isinstance(data_to_process, dict) and data_to_process.get("orderReference"):
            temp_order_ref = data_to_process.get("orderReference")
        else: # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ orderReference –≤ —Å—ã—Ä–æ–π —Å—Ç—Ä–æ–∫–µ (–µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –¥–æ —Å–ª–æ–≤–∞—Ä—è –Ω–µ —É–¥–∞–ª—Å—è)
            try:
                match_order_ref = re.search(r'"orderReference"\s*:\s*"([^"]+)"', body_str_for_log)
                if match_order_ref:
                    temp_order_ref = match_order_ref.group(1)
            except Exception:
                pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å

        response_time_unix = int(datetime.utcnow().timestamp())
        try:
            response_sig = make_service_response_signature(WAYFORPAY_SECRET_KEY, temp_order_ref, "accept", response_time_unix)
        except Exception: # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –¥–∞–∂–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ —É–ø–∞–¥–µ—Ç
            response_sig = "error_generating_signature_on_error_path"
        return {"orderReference": temp_order_ref, "status": "accept", "time": response_time_unix, "signature": response_sig}

    if not verify_service_webhook_signature(WAYFORPAY_SECRET_KEY, webhook_data):
        logger.error(f"CRITICAL: Invalid signature in webhook from WayForPay! OrderRef: {webhook_data.orderReference}. Data will not be processed.")
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π "–û–ö" –æ—Ç–≤–µ—Ç –¥–ª—è WayForPay, —á—Ç–æ–±—ã –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏.
        response_time_unix = int(datetime.utcnow().timestamp())
        response_sig = make_service_response_signature(WAYFORPAY_SECRET_KEY, webhook_data.orderReference, "accept", response_time_unix)
        return {"orderReference": webhook_data.orderReference, "status": "accept", "time": response_time_unix, "signature": response_sig}
    # –ï—Å–ª–∏ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –≤—ã—à–µ, –¥–∞–ª—å–Ω–µ–π—à–∏–π –∫–æ–¥ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤–µ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏.

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ telegram_user_id –∏–∑ orderReference
    match = re.search(r"_(?P<user_id>\d+)_", webhook_data.orderReference)
    if not match:
        logger.error(f"Could not extract user_id from orderReference: {webhook_data.orderReference}")
        response_time_unix = int(datetime.utcnow().timestamp())
        response_sig = make_service_response_signature(WAYFORPAY_SECRET_KEY, webhook_data.orderReference, "accept", response_time_unix)
        return {"orderReference": webhook_data.orderReference, "status": "accept", "time": response_time_unix, "signature": response_sig}

    telegram_user_id = int(match.group("user_id"))

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–ø—ã—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞ (–∏–ª–∏ —Å–æ–∑–¥–∞–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≤–µ–±-—Ö—É–∫ –ø–æ —ç—Ç–æ–º—É orderReference)
    await db["payment_attempts"].update_one(
        {"orderReference": webhook_data.orderReference},
        {"$set": {
            "status": webhook_data.transactionStatus, 
            "wfp_webhook_received_utc": datetime.utcnow(),
            "wfp_webhook_data": webhook_data.model_dump()
            }
        },
        upsert=True # –°–æ–∑–¥–∞—Å—Ç –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ —Ç–∞–∫–æ–π orderReference –µ—â–µ –Ω–µ –±—ã–ª–æ
    )

    if webhook_data.transactionStatus == "Approved":
        logger.info(f"Payment APPROVED for orderReference: {webhook_data.orderReference}, user_id: {telegram_user_id}")
        
        rec_token = webhook_data.recToken
        if not rec_token:
            logger.warning(f"REC TOKEN IS EMPTY for successful payment! OrderRef: {webhook_data.orderReference}. Automatic renewals will not be possible.")
        else:
            logger.info(f"Received recToken: {rec_token} for OrderRef: {webhook_data.orderReference}")

        try:
            kyiv_tz = timezone('Europe/Kyiv')
            current_sub = await db["subscriptions"].find_one({"user_id": telegram_user_id})
            
            start_date_obj = datetime.now(kyiv_tz) # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –Ω–∞—á–∞–ª–æ –ø–æ–¥–ø–∏—Å–∫–∏ - —Å–µ–π—á–∞—Å
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –æ—Ç –µ–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
            if current_sub and current_sub.get("is_active") and current_sub.get("subscription_end"):
                try:
                    current_end_date_obj = datetime.strptime(current_sub["subscription_end"], "%Y-%m-%d")
                    # –í–∞–∂–Ω–æ: –µ—Å–ª–∏ current_end_date_obj –Ω–µ –∏–º–µ–µ—Ç tzinfo, –Ω—É–∂–Ω–æ –µ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –Ω–∞–∏–≤–Ω—ã–µ –¥–∞—Ç—ã
                    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –µ—Å–ª–∏ –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ –±—É–¥—É—â–µ–º, —Å—á–∏—Ç–∞–µ–º –æ—Ç –Ω–µ–µ
                    if current_end_date_obj > datetime.now().date(): # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—ã
                        start_date_obj = datetime.combine(current_end_date_obj, datetime.min.time()) + timedelta(days=1)
                        start_date_obj = kyiv_tz.localize(start_date_obj) # –õ–æ–∫–∞–ª–∏–∑—É–µ–º –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
                except ValueError as ve:
                    logger.warning(f"Invalid subscription_end format ('{current_sub.get('subscription_end')}') for user_id {telegram_user_id}, starting new sub from today. Error: {ve}")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è. –ï—Å–ª–∏ amount = 1 (—Ç–µ—Å—Ç), –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 1 –¥–µ–Ω—å –¥–ª—è —Ç–µ—Å—Ç–∞.
            # days_to_add = 1 if webhook_data.amount == 1 else 30 
            days_to_add = 30 # –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            new_end_date_obj = start_date_obj + relativedelta(days=days_to_add)

            update_fields = {
                "subscription_start": start_date_obj.strftime("%Y-%m-%d"),
                "subscription_end": new_end_date_obj.strftime("%Y-%m-%d"),
                "is_active": 1,
                "cancel_requested": 0,
                "rec_token": rec_token,
                "last_payment_order_ref": webhook_data.orderReference,
                "last_payment_status": "Approved",
                "payment_system": webhook_data.paymentSystem,
                "card_pan_mask": webhook_data.cardPan,
                "email_from_payment": webhook_data.email,
                "phone_from_payment": webhook_data.phone,
                "updated_at_utc": datetime.utcnow()
            }
            
            await db["subscriptions"].update_one(
                {"user_id": telegram_user_id},
                {"$set": update_fields, "$setOnInsert": {"user_id": telegram_user_id, "created_at_utc": datetime.utcnow()}},
                upsert=True
            )
            logger.info(f"Subscription activated/extended for user_id: {telegram_user_id} until {new_end_date_obj.strftime('%Y-%m-%d')}. RecToken: {rec_token}")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
            notification_data = {
                'user_id': telegram_user_id,
                'message_type': 'subscription_success',
                'details': {
                    'end_date': new_end_date_obj.strftime('%Y-%m-%d'),
                    'rec_token': rec_token,
                    'order_ref': webhook_data.orderReference
                }
            }
            async with aiohttp.ClientSession() as session:
                async with session.post(BOT_NOTIFICATION_URL, json=notification_data) as resp:
                    if resp.status == 200:
                        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–æ—Ç—É –¥–ª—è user {telegram_user_id}")
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±–æ—Ç—É (—Å—Ç–∞—Ç—É—Å {resp.status}): {await resp.text()}")

        except Exception as e:
            logger.error(f"Error updating subscription in DB for user_id {telegram_user_id}: {e}")
            # –ó–∞–ø—Ä–æ—Å –≤—Å–µ —Ä–∞–≤–Ω–æ –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å "accept", —á—Ç–æ–±—ã WayForPay –Ω–µ —Å–ª–∞–ª –ø–æ–≤—Ç–æ—Ä–Ω–æ

    elif webhook_data.transactionStatus == "Pending":
        logger.info(f"Payment PENDING for orderReference: {webhook_data.orderReference}, user_id: {telegram_user_id}")
        # –î–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–µ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞–µ–º, –∂–¥–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞.
    
    else: # Declined, Expired –∏ —Ç.–¥.
        logger.warning(f"Payment NOT APPROVED. Status: {webhook_data.transactionStatus}, Reason: {webhook_data.reason} (Code: {webhook_data.reasonCode}) for orderReference: {webhook_data.orderReference}")
        # TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram-–±–æ—Ç–æ–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ—É–¥–∞—á–µ
        await send_telegram_notification_to_user(telegram_user_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª. –ü—Ä–∏—á–∏–Ω–∞: " + str(webhook_data.reason))


    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç WayForPay
    response_time_unix = int(datetime.utcnow().timestamp())
    response_signature = make_service_response_signature(WAYFORPAY_SECRET_KEY, webhook_data.orderReference, "accept", response_time_unix)
    
    return {
        "orderReference": webhook_data.orderReference,
        "status": "accept",
        "time": response_time_unix,
        "signature": response_signature
    }

app.include_router(payment_api_router)