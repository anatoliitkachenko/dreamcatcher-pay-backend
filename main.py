import os
import hmac
import hashlib
import base64
from datetime import datetime, timedelta, date
from dateutil.relativedelta import relativedelta
from fastapi import FastAPI, Request, HTTPException, APIRouter 
from fastapi.responses import HTMLResponse
from pydantic import BaseModel
from datetime import datetime, timedelta
from typing import Optional
from motor.motor_asyncio import AsyncIOMotorClient
from fastapi.middleware.cors import CORSMiddleware
from dotenv import load_dotenv
import logging
from pytz import timezone 

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

MONGO_URI = os.getenv("MONGO_URI")
WAYFORPAY_MERCHANT_ACCOUNT = os.getenv("WAYFORPAY_MERCHANT_ACCOUNT")
WAYFORPAY_SECRET_KEY = os.getenv("WAYFORPAY_SECRET_KEY")
WAYFORPAY_DOMAIN = os.getenv("WAYFORPAY_DOMAIN")

mongo_client = AsyncIOMotorClient(MONGO_URI)
db = mongo_client["dream_database"]

app = FastAPI()
payment_api_router = APIRouter(prefix="/api/pay")

app.add_middleware(
    CORSMiddleware,
    # üî¥ –£–∫–∞–∂–∏—Ç–µ –∑–¥–µ—Å—å –∞–¥—Ä–µ—Å, –≥–¥–µ –±—É–¥–µ—Ç –∂–∏—Ç—å –≤–∞—à pay-helper.html –∏–ª–∏ –¥—Ä—É–≥–∏–µ –∫–ª–∏–µ–Ω—Ç—ã
    allow_origins=["https://dreamcatcher.guru", "https://payapi.dreamcatcher.guru"],
    allow_credentials=True,
    allow_methods=["POST", "GET"],
    allow_headers=["*"],
)

class CheckoutSession(BaseModel):
    user_id: str
    plan_type: str
    username: Optional[str] = None
    first_name: Optional[str] = None

def make_wayforpay_signature(secret_key: str, params_list: List[str]) -> str:
    sign_str = ';'.join(str(x) for x in params_list)
    # –î–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ API WayForPay –ø–æ–¥–ø–∏—Å—å HMAC-MD5 –≤ hex-—Ñ–æ—Ä–º–∞—Ç–µ
    return hmac.new(secret_key.encode(), sign_str.encode(), hashlib.md5).hexdigest()

@payment_api_router.post("/create-checkout-session")
async def create_checkout_session(session: CheckoutSession):
    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ (/api/pay/create-checkout-session): {session}")

    if session.plan_type != "subscription":
        # –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        raise HTTPException(status_code=400, detail="Invalid plan_type for this endpoint, only 'subscription' allowed.")

    amount = 300 # –°—É–º–º–∞ –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö
    order_ref = f"sub_{session.user_id}_{int(datetime.utcnow().timestamp())}" # "sub" –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
    order_date = int(datetime.utcnow().timestamp())

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
    today_date_obj = date.today()

    next_month_date = today_date_obj + relativedelta(months=1) 

    params_for_signature = [
        WAYFORPAY_MERCHANT_ACCOUNT,
        WAYFORPAY_DOMAIN,
        order_ref,
        str(order_date),
        str(amount),
        "UAH",
        "AI Dream Analysis (Subscription)", # –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
        "1", # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        str(amount) # –¶–µ–Ω–∞
    ]
    # üî¥ –í–ê–ñ–ù–û: –°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –∏ –∏—Ö –ü–û–†–Ø–î–û–ö –î–û–õ–ñ–ï–ù –¢–û–ß–ù–û –°–û–û–¢–í–ï–¢–°–¢–í–û–í–ê–¢–¨
    # üî¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ WayForPay –¥–ª—è –º–µ—Ç–æ–¥–∞ Purchase —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –ø–ª–∞—Ç–µ–∂–∞–º–∏!
    # üî¥ –≠—Ç–æ –ü–†–ò–ú–ï–†–ù–´–ô –ø–æ—Ä—è–¥–æ–∫, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –ª–æ–≥–∏–∫–µ. –ü–†–û–í–ï–†–¨–¢–ï!
    params_for_signature = [
        WAYFORPAY_MERCHANT_ACCOUNT,
        WAYFORPAY_DOMAIN,
        order_ref,
        str(order_date),
        str(amount),
        "UAH",
        "AI Dream Analysis (Subscription)", # productName[0]
        "1", # productCount[0]
        str(amount), # productPrice[0]
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ (–≤ –ü–†–ê–í–ò–õ–¨–ù–û–ú –ü–û–†–Ø–î–ö–ï!)
        str(amount), # regularAmount
        "month",     # regularMode
        "1",         # regularInterval
        "0",         # regularCount (0 = –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ)
        regular_start_date_str # regularStartDate
        # üî¥ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ clientAccountId –∏ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–¥–µ—Å—å!
        # üî¥ –û–±—ã—á–Ω–æ, –ø–æ–ª—è client* –Ω–µ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –ø–æ–¥–ø–∏—Å–∏ SimpleSignature.
    ]
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥–ø–∏—Å–∏ (hex)
    merchant_signature = make_wayforpay_signature(WAYFORPAY_SECRET_KEY, params_for_signature)

    base_backend_url = os.getenv('BACKEND_URL_BASE', 'https://payapi.dreamcatcher.guru')
    frontend_url_for_return = os.getenv('FRONTEND_URL', 'https://dreamcatcher.guru')

    payment_form_data = {
        "merchantAccount": WAYFORPAY_MERCHANT_ACCOUNT,
        "merchantAuthType": "SimpleSignature",
        "merchantDomainName": WAYFORPAY_DOMAIN,
        "orderReference": order_ref,
        "orderDate": str(order_date),
        "amount": str(amount),
        "currency": "UAH",
        "productName[]": ["AI Dream Analysis (Subscription)"],
        "productCount[]": ["1"],
        "productPrice[]": [str(amount)],
        "clientFirstName": session.first_name or "",
        "clientAccountId": session.user_id, # –û—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –≤–µ–±-—Ö—É–∫–æ–≤
        "merchantSignature": merchant_signature,
        "language": "UA",
        "returnUrl": f"{frontend_url_for_return}/payment-return.html",
        "serviceUrl": f"{base_backend_url}/api/pay/wayforpay-webhook",

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        "regularMode": "month",
        "regularAmount": str(amount), # –°—É–º–º–∞ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Å–ø–∏—Å–∞–Ω–∏–π
        "regularCount": "0",          # 0 - –æ–∑–Ω–∞—á–∞–µ—Ç –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        "regularStartDate": regular_start_date_str,
        "regularInterval": "1"        # –ò–Ω—Ç–µ—Ä–≤–∞–ª (1 –º–µ—Å—è—Ü)
    }
    logger.info(f"–î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –¥–ª—è WayForPay (—Ä–µ–≥—É–ª—è—Ä–Ω—ã–π): {payment_form_data}")
    await db["checkout_sessions"].insert_one({
        "orderReference": order_ref,
        "user_id": int(session.user_id),
        "plan_type": session.plan_type, # "subscription"
        "amount": amount,
        "status": "created_recurring_initial", # –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        "created_utc": datetime.utcnow()
    })
    return {"pay_url": "https://secure.wayforpay.com/pay", "payment_form_data": payment_form_data}

@payment_api_router.post("/wayforpay-webhook")
async def wayforpay_webhook(request: Request):
    data = await request.json()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ –æ—Ç WayForPay (/api/pay/wayforpay-webhook): {data}")

    # ... (–∫–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ –≤–µ–±—Ö—É–∫–∞, –∫–∞–∫ —É –≤–∞—Å –±—ã–ª) ...
    # ... (–í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ make_wayforpay_signature —Å hex-–≤—ã–≤–æ–¥–æ–º –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤) ...

    received_signature = data.get("merchantSignature")
    order_ref = data.get("orderReference")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –í–ï–ë–•–£–ö–ê (–ø–æ—Ä—è–¥–æ–∫ –∏ –Ω–∞–±–æ—Ä –ø–æ–ª–µ–π –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ WayForPay)
    # üî¥ –í–ê–ñ–ù–û: –°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –∏ –∏—Ö –ü–û–†–Ø–î–û–ö –î–û–õ–ñ–ï–ù –¢–û–ß–ù–û –°–û–û–¢–í–ï–¢–°–¢–í–û–í–ê–¢–¨
# üî¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ WayForPay –¥–ª—è –≤–µ–±-—Ö—É–∫–æ–≤! –≠–¢–û –¢–û–õ–¨–ö–û –ü–†–ò–ú–ï–†!
    sign_fields_webhook = [
        data.get("merchantAccount"),
        data.get("orderReference"),
        data.get("amount"),
        data.get("currency"),
        data.get("authCode"),
        data.get("cardPan"),
        data.get("transactionStatus"),
        data.get("reasonCode")
]
# üî¥ –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–±—Ä–∞—Ç—å –ø–æ–ª—è!
    # –£–±–∏—Ä–∞–µ–º None, –µ—Å–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –ø–æ–ª—è –Ω–µ –ø—Ä–∏—à–ª–∏, –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ
    sign_fields_webhook_clean = [str(f) for f in sign_fields_webhook if f is not None]

    webhook_signature_string = ';'.join(sign_fields_webhook_clean)
    # –î–ª—è –≤–µ–±—Ö—É–∫–æ–≤ –æ–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è make_wayforpay_signature (—Å hexdigest)
    calculated_signature = make_wayforpay_signature(WAYFORPAY_SECRET_KEY, sign_fields_webhook_clean)

    if calculated_signature != received_signature:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –≤–µ–±—Ö—É–∫–∞ –¥–ª—è orderReference {order_ref}. String: {webhook_signature_string}, Calc: {calculated_signature}, Recv: {received_signature}")
        raise HTTPException(status_code=400, detail="Invalid webhook signature")

    logger.info(f"–ü–æ–¥–ø–∏—Å—å –≤–µ–±—Ö—É–∫–∞ –¥–ª—è orderReference {order_ref} –≤–µ—Ä–Ω–∞.")

    transaction_status = data.get("transactionStatus")
    user_id_str = data.get("clientAccountId")
    rec_token = data.get("recToken") # –¢–æ–∫–µ–Ω –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π

    current_time_utc = datetime.utcnow()
    tz_kyiv = timezone('Europe/Kyiv')

    if not user_id_str: # –î–æ–ª–∂–µ–Ω –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∏–∑ clientAccountId
        logger.error(f"clientAccountId (user_id) –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –≤–µ–±—Ö—É–∫–µ –¥–ª—è orderReference {order_ref}")
        # ... (–∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ WayForPay —Å accept) ...
        response_time_utc_ts = int(current_time_utc.timestamp())
        response_signature_str = f"{order_ref};accept;{response_time_utc_ts}"
        response_signature = make_wayforpay_signature(WAYFORPAY_SECRET_KEY, [order_ref, "accept", str(response_time_utc_ts)])
        return {"orderReference": order_ref, "status": "accept", "time": response_time_utc_ts, "signature": response_signature}

    user_id = int(user_id_str)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –≤ checkout_sessions
    await db["checkout_sessions"].update_one(
        {"orderReference": order_ref, "user_id": user_id},
        {"$set": {"status": transaction_status, "webhook_received_utc": current_time_utc, "webhook_data": data}},
        upsert=True # –í–∞–∂–Ω–æ, –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –∫–Ω–æ–ø–∫–æ–π –∏ –Ω–µ –±—ã–ª –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø–∏—Å–∞–Ω
    )

    if transaction_status == "Approved":
        checkout_session = await db["checkout_sessions"].find_one({"orderReference": order_ref, "user_id": user_id})
        plan_type = checkout_session.get("plan_type") if checkout_session else None

        # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∞ (–ø–µ—Ä–≤—ã–π –∏–ª–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–π —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂)
        if order_ref.startswith("sub_") or (checkout_session and plan_type == "subscription"):
            end_date_utc = current_time_utc + timedelta(days=30)
            end_date_kyiv_str = end_date_utc.astimezone(tz_kyiv).strftime("%Y-%m-%d")
            current_date_kyiv_str = current_time_utc.astimezone(tz_kyiv).strftime("%Y-%m-%d")

            update_data = {
                "user_id": user_id, "is_active": 1,
                "subscription_start": current_date_kyiv_str, # –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ end_date
                "subscription_end": end_date_kyiv_str,
                "cancel_requested": 0,
                "plan_type": "subscription" # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º
            }
            if rec_token: # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
                update_data["recToken"] = rec_token
                update_data["last_successful_charge_utc"] = current_time_utc

            await db["subscriptions"].update_one(
                {"user_id": user_id},
                {"$set": update_data},
                upsert=True
            )
            logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è user_id {user_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞/–ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ {end_date_kyiv_str}. recToken: {rec_token}")

        # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª —Ä–∞–∑–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ (–æ—Ç –∫–Ω–æ–ø–∫–∏ "–æ–ø–ª–∞—Ç–∏—Ç—å –æ–¥–∏–Ω —Å–æ–Ω")
        elif order_ref.startswith("single_") or (checkout_session and plan_type == "single"):
            current_date_kyiv_str = current_time_utc.astimezone(tz_kyiv).strftime("%Y-%m-%d")
            current_month_kyiv_str = current_time_utc.astimezone(tz_kyiv).strftime("%Y-%m")
            await db["usage_limits"].update_one(
                {"user_id": user_id, "date": current_date_kyiv_str},
                {"$set": {"unlimited_today": 1},
                    "$setOnInsert": {
                    "user_id": user_id, "date": current_date_kyiv_str, "dream_count": 0,
                    "monthly_count": 0, "last_reset_month": current_month_kyiv_str,
                    "first_usage_date": current_date_kyiv_str}},
                upsert=True)
            logger.info(f"–†–∞–∑–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ (unlimited_today) –¥–ª—è user_id {user_id} –Ω–∞ {current_date_kyiv_str}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ WayForPay
    response_time_utc_ts = int(current_time_utc.timestamp())
    # –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –æ—Ç–≤–µ—Ç–∞: orderReference;status;time
    response_params = [order_ref, "accept", str(response_time_utc_ts)]
    response_signature = make_wayforpay_signature(WAYFORPAY_SECRET_KEY, response_params)
    return {"orderReference": order_ref, "status": "accept", "time": response_time_utc_ts, "signature": response_signature}

# –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–∑–æ–≤–∞ API —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ WayForPay
# WAYFORPAY_API_URL = "https://api.wayforpay.com/api" # –£—Ç–æ—á–Ω–∏—Ç–µ URL

# async def charge_recurring_payment(user_id: int, order_reference: str, amount: float, currency: str, rec_token: str):
#     order_date = int(datetime.utcnow().timestamp())
#     params_for_signature = [
#         WAYFORPAY_MERCHANT_ACCOUNT,
#         order_reference, # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è
#         str(amount),
#         currency,
#         rec_token,
#         str(order_date)
#     ]
#     # –£—Ç–æ—á–Ω–∏—Ç–µ —Ç–æ—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏!
#     signature = make_wayforpay_signature(WAYFORPAY_SECRET_KEY, params_for_signature)

#     payload = {
#         "transactionType": "REGULAR_PAYMENT", # –ò–ª–∏ –¥—Ä—É–≥–æ–π, –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
#         "merchantAccount": WAYFORPAY_MERCHANT_ACCOUNT,
#         "orderReference": order_reference,
#         "amount": amount,
#         "currency": currency,
#         "recToken": rec_token,
#         "orderDate": order_date,
#         "comment": "Monthly subscription renewal",
#         "merchantSignature": signature
#     }
#     async with httpx.AsyncClient() as client:
#         try:
#             response = await client.post(WAYFORPAY_API_URL, json=payload)
#             response.raise_for_status() # –í—ã–∑–æ–≤–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è 4xx/5xx
#             logger.info(f"Recurring payment API response for order {order_reference}: {response.json()}")
#             return response.json()
#         except httpx.HTTPStatusError as e:
#             logger.error(f"HTTP error charging recurring payment for order {order_reference}: {e.response.text}")
#             return None
#         except Exception as e:
#             logger.error(f"Error charging recurring payment for order {order_reference}: {e}")
#             return None

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—É—Ç–∏
@payment_api_router.get("/check-access") 
async def check_access_endpoint(user_id: str): # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å —Ñ—É–Ω–∫—Ü–∏–µ–π check_access –∏–∑ –±–æ—Ç–∞
    try:
        user_id_int = int(user_id)
    except ValueError:
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π user_id –≤ /api/pay/check-access: {user_id}")
        return {"active": False}
    
    tz_kyiv = timezone('Europe/Kyiv') 
    today_kyiv_str = datetime.now(tz_kyiv).strftime("%Y-%m-%d")

    sub = await db["subscriptions"].find_one({"user_id": user_id_int}) 
    
    if sub and sub.get("is_active") == 1 and sub.get("subscription_end") >= today_kyiv_str:
        logger.info(f"–î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è user_id {user_id_int} —á–µ—Ä–µ–∑ /api/pay/check-access. –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {sub.get('subscription_end')}")
        return {"active": True}
    
    logger.info(f"–î–æ—Å—Ç—É–ø –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è user_id {user_id_int} —á–µ—Ä–µ–∑ /api/pay/check-access. –î–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: {sub}")
    return {"active": False}

# –í–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FastAPI
app.include_router(payment_api_router)