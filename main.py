import os
import hmac
import hashlib
import base64
from datetime import datetime, timedelta, date
from dateutil.relativedelta import relativedelta
from fastapi import FastAPI, Request, HTTPException, APIRouter 
from fastapi.responses import HTMLResponse
from pydantic import BaseModel
from datetime import datetime, timedelta, date
from typing import List, Optional, Dict
from motor.motor_asyncio import AsyncIOMotorClient
from fastapi.middleware.cors import CORSMiddleware
from dotenv import load_dotenv
import logging
from pytz import timezone 

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

MONGO_URI = os.getenv("MONGO_URI")
WAYFORPAY_MERCHANT_ACCOUNT = os.getenv("WAYFORPAY_MERCHANT_ACCOUNT")
WAYFORPAY_SECRET_KEY = os.getenv("WAYFORPAY_SECRET_KEY")
WAYFORPAY_DOMAIN = os.getenv("WAYFORPAY_DOMAIN")

mongo_client = AsyncIOMotorClient(MONGO_URI)
db = mongo_client["dream_database"]

app = FastAPI()
payment_api_router = APIRouter(prefix="/api/pay")

# ‚ùó –ü–†–û–í–ï–†–ò–¢–¨/–ù–ê–°–¢–†–û–ò–¢–¨: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∏ URL —Ç–æ—á–Ω—ã
# –ó–∞–ø—Ä–æ—Å –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å 'https://www.dreamcatcher.guru'
FRONTEND_DOMAIN_WWW = "https://www.dreamcatcher.guru" # <--- üü¢ –î–û–ë–ê–í–õ–ï–ù–û 'www.'
FRONTEND_DOMAIN_NO_WWW = "https://dreamcatcher.guru" # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∏–Ω–æ–≥–¥–∞ –±–µ–∑ www
BACKEND_DOMAIN = "https://payapi.dreamcatcher.guru" # –ï—Å–ª–∏ –≤–∞—à API –Ω–∞ –¥—Ä—É–≥–æ–º –ø–æ–¥–¥–æ–º–µ–Ω–µ

# –í–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –≤–∫–ª—é—á–∞—è –ª–æ–∫–∞–ª—å–Ω—ã–µ
origins = [
    FRONTEND_DOMAIN_WWW,    # <--- üü¢ –ò–°–ü–û–õ–¨–ó–£–ï–ú –° 'www.'
    FRONTEND_DOMAIN_NO_WWW, # <--- –î–æ–±–∞–≤—å—Ç–µ –∏ –±–µ–∑ 'www.', –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
    BACKEND_DOMAIN,         # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ API –∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –¥–æ–º–µ–Ω–∞—Ö/–ø–æ–¥–¥–æ–º–µ–Ω–∞—Ö –∏ –Ω—É–∂–Ω—ã –≤–∑–∞–∏–º–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    # "http://localhost",
    # "http://127.0.0.1",
    # "http://localhost:xxxx", # –ó–∞–º–µ–Ω–∏—Ç–µ xxxx –Ω–∞ –ø–æ—Ä—Ç, –µ—Å–ª–∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç–µ –ª–æ–∫–∞–ª—å–Ω–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["GET", "POST", "OPTIONS", "PUT", "DELETE", "PATCH"],
    allow_headers=["*"], 
    expose_headers=["*"],
    max_age=600
)

class CheckoutSession(BaseModel):
    user_id: str
    plan_type: str
    username: Optional[str] = None
    first_name: Optional[str] = None

class WidgetParamsRequest(BaseModel):
    user_id: str
    plan_type: str 
    lang: Optional[str] = 'UA' # –Ø–∑—ã–∫ –≤–∏–¥–∂–µ—Ç–∞ (UA, RU, EN)
    client_first_name: Optional[str] = None
    client_last_name: Optional[str] = None
    client_email: Optional[str] = None
    client_phone: Optional[str] = None

def make_wayforpay_signature(secret_key: str, params_list: List[str]) -> str:
    sign_str = ';'.join(str(x) for x in params_list)
    # –î–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ API WayForPay –ø–æ–¥–ø–∏—Å—å HMAC-MD5 –≤ hex-—Ñ–æ—Ä–º–∞—Ç–µ
    return hmac.new(secret_key.encode(), sign_str.encode(), hashlib.md5).hexdigest()

@payment_api_router.post("/get-widget-params") # –ò–º—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–æ
async def get_widget_payment_params(request_data: WidgetParamsRequest):
    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞ (/api/pay/get-widget-params): {request_data}")

    user_id_str = request_data.user_id
    plan_type = request_data.plan_type
    
    product_name_str = ""
    amount = 0

    if plan_type == "subscription":
        amount = 300 
        product_name_str = "AI Dream Analysis (Subscription)"
        order_ref_prefix = "widget_sub"
    elif plan_type == "single":
        amount = 40 
        product_name_str = "AI Dream Analysis (Single)"
        order_ref_prefix = "widget_single"
    else:
        logger.error(f"Invalid plan_type '{plan_type}' received for widget params.")
        raise HTTPException(status_code=400, detail="Invalid plan_type. Allowed: 'subscription', 'single'.")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º orderReference, –≤–∫–ª—é—á–∞—è telegram_user_id –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    order_ref = f"{order_ref_prefix}_{user_id_str}_{int(datetime.utcnow().timestamp())}"
    order_date = int(datetime.utcnow().timestamp()) # Timestamp

    signature_params_list = [
        WAYFORPAY_MERCHANT_ACCOUNT,
        WAYFORPAY_DOMAIN,       # –≠—Ç–æ –≤–∞—à merchantDomainName
        order_ref,
        str(order_date),
        str(amount),
        "UAH",                  # –í–∞–ª—é—Ç–∞
        product_name_str,       # productName[0]
        "1",                    # productCount[0]
        str(amount)             # productPrice[0]
    ]

    widget_params_to_send = {
        "merchantAccount": WAYFORPAY_MERCHANT_ACCOUNT,
        "merchantDomainName": WAYFORPAY_DOMAIN,
        "authorizationType": "SimpleSignature",
        # merchantSignature –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ
        "orderReference": order_ref,
        "orderDate": str(order_date),
        "amount": str(amount),
        "currency": "UAH",
        "productName": [product_name_str],
        "productPrice": [str(amount)],
        "productCount": ["1"],
        "language": request_data.lang.upper() if request_data.lang and request_data.lang.upper() in ["UA", "RU", "EN"] else "UA",
        "serviceUrl": f"{base_backend_url}/api/pay/wayforpay-webhook",
        
        "clientFirstName": request_data.client_first_name or "N/A", # üü¢ –ò–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –±–æ—Ç–∞
        "clientLastName": request_data.client_last_name or "N/A",   # üü¢
        "clientEmail": request_data.client_email or f"user_{user_id_str}@example.com", # üü¢ –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π email
        "clientPhone": request_data.client_phone or "380000000000"    # üü¢ –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
    }

    if plan_type == "subscription":
        today_date_obj = date.today()
        next_month_date = today_date_obj + relativedelta(months=1) 
        regular_start_date_str = next_month_date.strftime("%Y-%m-%d")
    
    widget_params_to_send.update({
            "regularMode": "month",
            "regularAmount": str(amount), 
            "regularCount": "0",          
            "regularStartDate": regular_start_date_str,
            "regularInterval": "1"        
        })

        # üü¢ –ï–°–õ–ò –ü–ï–†–ï–î–ê–ï–ú REGULAR-–ü–ê–†–ê–ú–ï–¢–†–´, –û–ù–ò –î–û–õ–ñ–ù–´ –ë–´–¢–¨ –í –ü–û–î–ü–ò–°–ò!
        # üî¥ –£–¢–û–ß–ù–ò–¢–ï –ü–û–†–Ø–î–û–ö –í –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò WAYFORPAY –î–õ–Ø PURCHASE –° –†–ï–ö–£–†–†–ï–ù–¢–ê–ú–ò!
        # –≠—Ç–æ –ü–†–ï–î–ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–´–ô –ø–æ—Ä—è–¥–æ–∫, –∏—Ö –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫ `signature_params_list` –≤—ã—à–µ.
        # –ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–ü–û–†–Ø–î–û–ö –í–ê–ñ–ï–ù –ò –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –ü–†–û–í–ï–†–ï–ù):
        # signature_params_list.extend([
        #     request_data.client_first_name or "N/A", # clientFirstName (–µ—Å–ª–∏ –æ–Ω –≤ –ø–æ–¥–ø–∏—Å–∏)
        #     request_data.client_last_name or "N/A",  # clientLastName (–µ—Å–ª–∏ –æ–Ω –≤ –ø–æ–¥–ø–∏—Å–∏)
        #     request_data.client_phone or "380000000000", # clientPhone (–µ—Å–ª–∏ –æ–Ω –≤ –ø–æ–¥–ø–∏—Å–∏)
        #     request_data.client_email or f"user_{user_id_str}@example.com", # clientEmail (–µ—Å–ª–∏ –æ–Ω –≤ –ø–æ–¥–ø–∏—Å–∏)
        #     # ... –î–†–£–ì–ò–ï –ü–û–õ–Ø, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è Purchase...
        #     str(amount), # regularAmount (–≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–∏ regular-–ø–æ–ª—è –∏–¥—É—Ç –ø–æ–∑–∂–µ)
        #     "month",     # regularMode
        #     "1",         # regularInterval
        #     "0",         # regularCount
        #     regular_start_date_str # regularStartDate
        # ])
        # üî¥ –ù–ê –î–ê–ù–ù–´–ô –ú–û–ú–ï–ù–¢ –Ø –ù–ï –í–ö–õ–Æ–ß–ê–Æ –ò–• –í –ü–û–î–ü–ò–°–¨, –¢–ê–ö –ö–ê–ö –¢–û–ß–ù–´–ô –ü–û–†–Ø–î–û–ö –ù–ï–ò–ó–í–ï–°–¢–ï–ù.
        # üî¥ –ï–°–õ–ò WAYFORPAY –¢–†–ï–ë–£–ï–¢ –ò–• –í –ü–û–î–ü–ò–°–ò –î–õ–Ø –í–ò–î–ñ–ï–¢–ê –° REGULAR –ü–ê–†–ê–ú–ï–¢–†–ê–ú–ò, –ü–õ–ê–¢–ï–ñ –ù–ï –ü–†–û–ô–î–ï–¢.

    merchant_signature = make_wayforpay_signature(WAYFORPAY_SECRET_KEY, signature_params_list)
    widget_params_to_send["merchantSignature"] = merchant_signature # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞

    logger.info(f"–§–∏–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞ WayForPay (—Å –ø–æ–¥–ø–∏—Å—å—é): {widget_params_to_send}")

    base_backend_url = os.getenv('BACKEND_URL_BASE', 'https://payapi.dreamcatcher.guru')

    widget_params = {
        "merchantAccount": WAYFORPAY_MERCHANT_ACCOUNT,
        "merchantDomainName": WAYFORPAY_DOMAIN,
        "authorizationType": "SimpleSignature",
        "merchantSignature": merchant_signature,
        "orderReference": order_ref,
        "orderDate": str(order_date),
        "amount": str(amount),
        "currency": "UAH",
        "productName": [product_name_str], # –ú–∞—Å—Å–∏–≤
        "productPrice": [str(amount)],    # –ú–∞—Å—Å–∏–≤
        "productCount": ["1"],            # –ú–∞—Å—Å–∏–≤
        "language": request_data.lang.upper() if request_data.lang and request_data.lang.upper() in ["UA", "RU", "EN"] else "UA",
        "serviceUrl": f"{base_backend_url}/api/pay/wayforpay-webhook", # URL –¥–ª—è –≤–µ–±-—Ö—É–∫–æ–≤
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –±–æ—Ç –∏—Ö –ø–µ—Ä–µ–¥–∞–µ—Ç)
        "clientFirstName": request_data.client_first_name or "",
        "clientLastName": request_data.client_last_name or "",
        "clientEmail": request_data.client_email or "",
        "clientPhone": request_data.client_phone or ""
    }

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π (–µ—Å–ª–∏ —ç—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞)
    # –≠—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω—É–∂–Ω—ã, —á—Ç–æ–±—ã WayForPay —Å–æ–∑–¥–∞–ª recToken
    if plan_type == "subscription":
        today_date_obj = date.today()
        next_month_date = today_date_obj + relativedelta(months=1) 
        regular_start_date_str = next_month_date.strftime("%Y-%m-%d")
        widget_params.update({
            "regularMode": "month",
            "regularAmount": str(amount), 
            "regularCount": "0",          
            "regularStartDate": regular_start_date_str,
            "regularInterval": "1"        
        })

    logger.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞ WayForPay: {widget_params}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ø—ã—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞
    try:
        user_id_int = int(user_id_str)
    except ValueError:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π user_id '{user_id_str}' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ payment_attempts.")
        raise HTTPException(status_code=400, detail="Invalid user_id format.")

    await db["payment_attempts"].insert_one({
        "orderReference": order_ref,
        "user_id": int(user_id_str),
        "plan_type": plan_type,
        "amount": amount,
        "status": "widget_params_generated",
        "created_utc": datetime.utcnow(),
        "widget_request_data": request_data.model_dump(),
        "sent_to_wfp_params": widget_params_to_send # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    })
    
    return widget_params_to_send

@payment_api_router.post("/get-widget-params") # –ò–º—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–æ
async def get_widget_payment_params(request_data: WidgetParamsRequest): # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å
    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞ (/api/pay/get-widget-params): {request_data}")

    user_id_str = request_data.user_id
    plan_type = request_data.plan_type
    
    product_name_str = ""
    amount = 0

    if plan_type == "subscription":
        amount = 300 
        product_name_str = "AI Dream Analysis (Subscription)"
        order_ref_prefix = "widget_sub"
    elif plan_type == "single":
        amount = 40 # ‚ùó –¶–µ–Ω–∞ –¥–ª—è —Ä–∞–∑–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, –µ—Å–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
        product_name_str = "AI Dream Analysis (Single)"
        order_ref_prefix = "widget_single"
    else:
        logger.error(f"Invalid plan_type '{plan_type}' received for widget params.")
        raise HTTPException(status_code=400, detail="Invalid plan_type. Allowed: 'subscription', 'single'.")

    order_ref = f"{order_ref_prefix}_{user_id_str}_{int(datetime.utcnow().timestamp())}"
    order_date = int(datetime.utcnow().timestamp()) # Timestamp

    # üü¢ DEFINE base_backend_url BEFORE its first use
    base_backend_url = os.getenv('BACKEND_URL_BASE', 'https://payapi.dreamcatcher.guru') # ‚ùó –ü–†–û–í–ï–†–¨–¢–ï, —á—Ç–æ BACKEND_URL_BASE –≤ .env –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–ø–∏—Å–∏ –≤–∏–¥–∂–µ—Ç–∞
    signature_params_list = [
        WAYFORPAY_MERCHANT_ACCOUNT,
        WAYFORPAY_DOMAIN,       # –≠—Ç–æ –≤–∞—à merchantDomainName
        order_ref,
        str(order_date),
        str(amount),
        "UAH",                  # –í–∞–ª—é—Ç–∞
        product_name_str,       # productName[0]
        "1",                    # productCount[0]
        str(amount)             # productPrice[0]
    ]
    
    # ‚ùó –í–ê–ñ–ù–û –î–õ–Ø –ü–û–î–ü–ò–°–û–ö (–ê–í–¢–û–°–ü–ò–°–ê–ù–ò–Ø):
    # –ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥–∞–µ—Ç–µ 'regularMode', 'regularAmount' –∏ —Ç.–¥. –≤ –≤–∏–¥–∂–µ—Ç,
    # —ç—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¢–ê–ö–ñ–ï –î–û–õ–ñ–ù–´ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ 'merchantSignature'
    # –≤ –¢–û–ß–ù–û–ú –ü–û–†–Ø–î–ö–ï, —É–∫–∞–∑–∞–Ω–Ω–æ–º –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ WayForPay –¥–ª—è –º–µ—Ç–æ–¥–∞ Purchase —Å —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–∞–º–∏.
    # –°–µ–π—á–∞—Å —è –∏—Ö –ù–ï –¥–æ–±–∞–≤–ª—è—é –≤ 'signature_params_list' –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏ –ø–æ—Ç–æ–º—É —á—Ç–æ —Ç–æ—á–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
    # –¥–ª—è –≤—Å–µ—Ö —ç—Ç–∏—Ö –ø–æ–ª–µ–π –≤–º–µ—Å—Ç–µ –Ω–µ –±—ã–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫ –≤–∏–¥–∂–µ—Ç—É.
    # –ï—Å–ª–∏ WayForPay –±—É–¥–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∏—Ö –≤ –ø–æ–¥–ø–∏—Å–∏, –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –≤–∏–¥–∂–µ—Ç –Ω–µ –ø—Ä–æ–π–¥–µ—Ç (–æ—à–∏–±–∫–∞ WayForPay).
    # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–µ–π—Ç–µ—Å—å —Ä–∞–±–æ—Ç—ã –±–µ–∑ regular-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –ü–û–î–ü–ò–°–ò, –Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—è –∏—Ö –≤ –≤–∏–¥–∂–µ—Ç.
    # WayForPay –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å recToken –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ø–µ—Ä–≤–æ–π –æ–ø–ª–∞—Ç–µ, –µ—Å–ª–∏ –≤–∞—à –º–µ—Ä—á–∞–Ω—Ç-–∞–∫–∫–∞—É–Ω—Ç —ç—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç.

    merchant_signature = make_wayforpay_signature(WAYFORPAY_SECRET_KEY, signature_params_list)

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –≤–∏–¥–∂–µ—Ç
    widget_params_to_send = {
        "merchantAccount": WAYFORPAY_MERCHANT_ACCOUNT,
        "merchantDomainName": WAYFORPAY_DOMAIN,
        "authorizationType": "SimpleSignature",
        "merchantSignature": merchant_signature, # –ü–æ–¥–ø–∏—Å—å –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∑–¥–µ—Å—å
        "orderReference": order_ref,
        "orderDate": str(order_date),
        "amount": str(amount),
        "currency": "UAH",
        "productName": [product_name_str],    # –ú–∞—Å—Å–∏–≤
        "productPrice": [str(amount)],       # –ú–∞—Å—Å–∏–≤
        "productCount": ["1"],               # –ú–∞—Å—Å–∏–≤
        "language": request_data.lang.upper() if request_data.lang and request_data.lang.upper() in ["UA", "RU", "EN"] else "UA",
        "serviceUrl": f"{base_backend_url}/api/pay/wayforpay-webhook", # –¢–µ–ø–µ—Ä—å base_backend_url –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
        
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏, –µ—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
        "clientFirstName": request_data.client_first_name or "N/A",
        "clientLastName": request_data.client_last_name or "N/A",
        "clientEmail": request_data.client_email or f"user_{user_id_str}@example.com", # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email
        "clientPhone": request_data.client_phone or "380000000000" # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    }

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π (–µ—Å–ª–∏ —ç—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞)
    # –≠—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω—É–∂–Ω—ã, —á—Ç–æ–±—ã WayForPay —Å–æ–∑–¥–∞–ª recToken
    if plan_type == "subscription":
        today_date_obj = date.today() # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ 'from datetime import date' –µ—Å—Ç—å
        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ 'from dateutil.relativedelta import relativedelta' –µ—Å—Ç—å
        next_month_date = today_date_obj + relativedelta(months=1) 
        regular_start_date_str = next_month_date.strftime("%Y-%m-%d")
        
        widget_params_to_send.update({
            "regularMode": "month",
            "regularAmount": str(amount), 
            "regularCount": "0",          
            "regularStartDate": regular_start_date_str,
            "regularInterval": "1"        
        })

    logger.info(f"–§–∏–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞ WayForPay (—Å –ø–æ–¥–ø–∏—Å—å—é): {widget_params_to_send}")
    
    try:
        user_id_int = int(user_id_str)
    except ValueError:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π user_id '{user_id_str}' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ payment_attempts.")
        # –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º HTTPException –∑–¥–µ—Å—å, —á—Ç–æ–±—ã CORS-–∑–∞–≥–æ–ª–æ–≤–∫–∏ —É—Å–ø–µ–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è,
        # –Ω–æ –≤–∏–¥–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –µ—Å–ª–∏ user_id –∫—Ä–∏—Ç–∏—á–µ–Ω –¥–ª—è –Ω–µ–≥–æ.
        # –û–¥–Ω–∞–∫–æ, user_id –¥–ª—è WayForPay –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ orderReference.
        # –ü—Ä–æ–±–ª–µ–º–∞ –±—É–¥–µ—Ç, –µ—Å–ª–∏ user_id –Ω–µ —á–∏—Å–ª–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –≤–∞—à—É –ë–î.
        # –õ—É—á—à–µ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å user_id –Ω–∞ –≤—Ö–æ–¥–µ –≤ Pydantic –º–æ–¥–µ–ª–∏, –µ—Å–ª–∏ –æ–Ω –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å int.
        raise HTTPException(status_code=400, detail="Invalid user_id format for database.")


    await db["payment_attempts"].insert_one({
        "orderReference": order_ref,
        "user_id": user_id_int, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π user_id_int
        "plan_type": plan_type,
        "amount": amount,
        "status": "widget_params_generated",
        "created_utc": datetime.utcnow(),
        "widget_request_data": request_data.model_dump(),
        "sent_to_wfp_params": widget_params_to_send # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ, —á—Ç–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≤–∏–¥–∂–µ—Ç
    })
    
    return widget_params_to_send

@payment_api_router.get("/check-access") 
async def check_access_endpoint(user_id: str): # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å —Ñ—É–Ω–∫—Ü–∏–µ–π check_access –∏–∑ –±–æ—Ç–∞
    try:
        user_id_int = int(user_id)
    except ValueError:
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π user_id –≤ /api/pay/check-access: {user_id}")
        return {"active": False}
    
    tz_kyiv = timezone('Europe/Kyiv') 
    today_kyiv_str = datetime.now(tz_kyiv).strftime("%Y-%m-%d")

    sub = await db["subscriptions"].find_one({"user_id": user_id_int}) 
    
    if sub and sub.get("is_active") == 1 and sub.get("subscription_end") >= today_kyiv_str:
        logger.info(f"–î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è user_id {user_id_int} —á–µ—Ä–µ–∑ /api/pay/check-access. –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {sub.get('subscription_end')}")
        return {"active": True}
    
    logger.info(f"–î–æ—Å—Ç—É–ø –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è user_id {user_id_int} —á–µ—Ä–µ–∑ /api/pay/check-access. –î–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: {sub}")
    return {"active": False}

# –í–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FastAPI
app.include_router(payment_api_router)